plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'eclipse' // only required when using Eclipse
    id "org.springframework.boot" version "3.3.0"
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
}

// java {
//   toolchain {
//     languageVersion = JavaLanguageVersion.of(17)
//   }
// }

repositories {
    // Use JCenter for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation "junit:junit:4.13.2"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.6.0'
    implementation 'org.json:json:20171018'
    implementation "org.jacoco:org.jacoco.ant:0.8.5"
    implementation "net.minidev:json-smart:1.3.1"
	implementation "org.apache.pdfbox:pdfbox-ant:1.8.16"
    implementation "org.apache.poi:poi-ooxml:5.2.3"
    implementation "org.apache.tika:tika-core:2.7.0"

    implementation 'org.glassfish.jersey.core:jersey-server:3.0.2' 
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:3.0.2' 
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:3.0.2' 
    implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.15'

    // MongoDB Java driver GridFS
    // implementation "org.mongodb:mongodb-driver-sync:4.9.0"
    implementation "org.mongodb:bson:4.9.0"
    
    // Jackson (for JSON serialization/deserialization)
    implementation "com.fasterxml.jackson.core:jackson-databind:2.14.2"

    implementation "com.google.code.gson:gson:2.10.1"

    // for writing tasks postgresql connection
    implementation "org.apache.commons:commons-dbcp2:2.9.0"

    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
	implementation 'javax.websocket:javax.websocket-api:1.1'

    compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
     //   javax.websocket-api;version="1.1", jslack;version="1.8.1", rocketchat-common;version="0.7.1, rocketchat-core;version="0.7.1, rocketchat-livechat;version="0.7.1"
    testImplementation "junit:junit:4.13.2"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// configurations {
//     // This ensures las2peer is available in the tests, but won't be bundled
//     testImplementation.extendsFrom implementation
// }

bootJar {
    mainClassName = "${project.property('service.name')}.${project.property('service.class')}"
}

application {
    // Define the main class for the application.
    mainClass = "${project.property('service.name')}.${project.property('service.class')}"

    group = "${project.property('service.name')}"
    archivesBaseName = group

    version = "${project.property('service.version')}"
    sourceCompatibility = "${project.property('java.version')}"
    targetCompatibility = "${project.property('java.version')}"
}

springBoot {
    mainClassName = "${project.property('service.name')}.${project.property('service.class')}"
}


tasks.named('test') {
  useJUnitPlatform()
}

// jar {
//     manifest {
//         attributes "Main-Class": "${project.property('service.name')}.${project.property('service.class')}"
//         attributes "Library-Version": "${project.property('service.version')}"
//         attributes "Library-SymbolicName": "${project.property('service.name')}"
//     }

//     from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } } {
//         // Exclude signatures to be able to natively bundle signed jars
//         exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
//     }
// }

// application {
//     // Define the main class for the application.
//     mainClass = "${project.property('service.name')}.${project.property('service.class')}"

//     group = "${project.property('service.name')}"
//     archivesBaseName = group

//     version = "${project.property('service.version')}"
//     sourceCompatibility = "${project.property('java.version')}"
//     targetCompatibility = "${project.property('java.version')}"
// }

// put all .jar files into export/jars folder
tasks.withType(Jar) {
    duplicatesStrategy = 'include'
    destinationDirectory = file("$projectDir/export/jars")
}

javadoc {
    destinationDir = file("$projectDir/export/doc")
}

build.dependsOn "javadoc"

compileJava {
    dependsOn "copyMain"
}

compileTestJava {
    dependsOn "copyTest"
}

// Copies .xml files into build directory
task copyMain(type: Copy) {
    from "src/main/java"
    include "**/*.xml"
    into "$buildDir/classes/java/main"
}

// Copies .xml files into build directory
task copyTest(type: Copy) {
    from "src/test/java"
    include "**/*.xml"
    into "$buildDir/classes/java/test"
}

// These two tasks restore the build and runtime environment used
// in the ant environment
task copyJar(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into "$rootDir/service"
}

task copyToLib(type: Copy) {
    from configurations.compileClasspath
    into "$rootDir/lib"
}

build.dependsOn copyJar
build.dependsOn copyToLib

// task startscripts {
//     def binDir = new File("$rootDir/bin")
//     if (!binDir.exists()) {
//         binDir.mkdirs()
//     }
//     def file = new File("$rootDir/bin/start_network.sh")
//     if (!file.exists()) {
//         file.createNewFile()
//     }
//     file.text = """#!/bin/bash

// # this script is autogenerated by 'gradle startscripts'
// # it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
// # pls execute it from the root folder of your deployment, e. g. ./bin/start_network.sh

// java -cp "lib/*" --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService\\(\\'${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}\\'\\) startWebConnector interactive
// """ 
//     def file2 = new File("$rootDir/bin/start_network.bat")
//     if (!file2.exists()) {
//         file2.createNewFile()
//     }
//     file2.text =  """:: this script is autogenerated by 'gradle startscripts'
// :: it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
// :: pls execute it from the bin folder of your deployment by double-clicking on it

// %~d0
// cd %~p0
// cd ..
// set BASE=%CD%
// set CLASSPATH="%BASE%/lib/*;"
// set ADD_OPENS=--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED

// java -cp %CLASSPATH% %ADD_OPENS% i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService('${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}') startWebConnector interactive

// pause
// """
// }
// 
// build.dependsOn "startscripts"

task deleteStartup {

        file("$rootDir/etc/startup").deleteDir()
    
}

build.dependsOn "deleteStartup"

clean.doLast {
    file("$rootDir/tmp").deleteDir()
    file("$rootDir/lib").deleteDir()
    file("$rootDir/servicebundle").deleteDir()
    file("$rootDir/service").deleteDir()
    file("$rootDir/etc/startup").deleteDir()
    file("$projectDir/export").deleteDir()
}

task cleanAll {
    dependsOn "clean"

    doLast {
        file("$rootDir/log").deleteDir()
        file("$rootDir/node-storage").deleteDir()
    }
}

test {
    workingDir = file("$rootDir")
}

// Only required when using Eclipse:
// configuration for eclipse (this allows to import the project as a gradle project in eclipse without any problems)
// eclipse {
//     classpath {
//       file {
//             whenMerged {
//                 // change output directory for test, main, resources and default
//                 def main = entries.find { it.path == "src/main/java" }
//                 main.output = "output/main"

//                 def test = entries.find { it.path == "src/test/java" }
//                 test.output = "output/test"

//                 def defaultEntry = entries.find { it.kind == "output" && it.path == "bin/default" }
//                 defaultEntry.path = "output/default"
//             }
//         }
//     }
// }